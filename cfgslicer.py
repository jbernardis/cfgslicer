import os
import datetime
from configparser import RawConfigParser
import logging

from cfgexceptions import CfgUnknownCategory, CfgUnknownFile, CfgDuplicateFile, CfgUnknownAttribute

EXTRUDER_KEY = "nozzle_diameter"

class CfgInvalidColor(Exception):
	def __init__(self):
		pass
	
class CfgFile:
	def __init__(self, attrdict, basename, hasExtruder):
		self.modified = False
		self.attributes = attrdict
		self.basename = basename
		self.hasExtruder = hasExtruder
		self.extruderCount = None
		self.determineExtruderCount()
		
	def determineExtruderCount(self, extKey=EXTRUDER_KEY):
		if self.hasExtruder and extKey in self.attributes:
			exts = self.attributes[extKey].split(",")
			self.extruderCount = len(exts)
			logging.debug("extruder count = %d" % self.extruderCount)
	
		else:
			self.extruderCount = None
		
	def setModified(self, flag=True):
		self.modified = flag
		
	def isModified(self):
		return self.modified
		
	def getAttributes(self):
		return self.attributes
	
	def setAttributes(self, adict):
		self.attributes = adict.copy()
		self.setModified()
		self.determineExtruderCount()
	
	def getAttribute(self, name):
		try:
			return self.attributes[name]
		except KeyError:
			raise CfgUnknownAttribute(name)
		
	def getExtruderCount(self):
		return self.extruderCount
	
	def setAttribute(self, name, value, mustExist=False):
		if mustExist:
			if name not in self.attributes:
				raise CfgUnknownAttribute(name)

		self.attributes[name] = value
		self.setModified()
		
		if name == EXTRUDER_KEY:
			self.determineExtruderCount()						
	
	
class CfgSlicer:	
	def __init__(self, root, dirs, attrMap):
		self.root = root
		self.dirs = dirs
		self.attrMap = attrMap
		self.missingDirs = []
		self.slicerVersion = ""
		self.extruderCategory = self.attrMap.getExtruderCategory()
		self.loadSlicerVersion(os.path.join(root, "PrusaSlicer.ini"))
		self.loadAttributes()

	def loadSlicerVersion(self, path):
		parser = RawConfigParser()
		with open(path) as stream:
			parser.read_string("[top]\n" + stream.read())

		for k, v in parser.items("top"):
			if k == "version":
				self.slicerVersion = v
				break

	def getSlicerVersion(self):
		return self.slicerVersion

	def loadAttributes(self):
		self.fileMap = {}
		self.fileExt = {}
		self.missingDirs = []
		for d in self.dirs:
			path = os.path.join(self.root, d)
			try:
				fl = [os.path.join(path, f) for f in os.listdir(path) if os.path.isfile(os.path.join(path, f)) and f.lower().endswith(".ini")]
			except FileNotFoundError:
				self.missingDirs.append(d)
				continue

			fm = {}
			fx = {}
			for fp in fl:
				parser = RawConfigParser()
				with open(fp) as stream:
					parser.read_string("[top]\n" + stream.read())

				fa = {}					
				for k, v in parser.items("top"):
					fa[k] = v
					
				bn = os.path.basename(fp)
				fm[os.path.splitext(bn)[0]] = CfgFile(fa, bn, d == self.extruderCategory)
				fx[os.path.splitext(bn)[0]] = os.path.splitext(bn)[1]
				
			self.fileMap[d] = fm
			self.fileExt[d] = fx	
			
	def getMissingDirs(self):
		return self.missingDirs
			
	def isAnyModified(self):
		for cat in self.fileMap:
			for f in self.fileMap[cat]:
				if self.fileMap[cat][f].isModified():
					return True
				
		return False
	
	def writeProperties(self, cat, fn):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		fqn = os.path.join(self.root, cat, fn+self.fileExt[cat][fn])
		attrdict = self.fileMap[cat][fn].getAttributes()
		
		with open(fqn, "w") as ofp:
			dt = datetime.datetime.now()
			tstamp = dt.strftime("%Y-%m-%d %H:%M:%S")
	
			ofp.write("# generated by CfgSlicer on %s\n" % tstamp)
	
			for k in sorted(attrdict.keys()):
				ofp.write("%s = %s\n" % (k, attrdict[k]))
				
		self.fileMap[cat][fn].setModified(False)
		
	def getRootDir(self):
		return self.root
	
	def getCatRoot(self, cat):
		return os.path.join(self.root, cat)
		
	def writeModified(self):
		flist = []
		for cat in self.fileMap:
			for f in self.fileMap[cat]:
				if self.fileMap[cat][f].isModified():
					flist.append(f)
					self.writeProperties(cat, f)
		return flist
					
	def copyFile(self, cat, fn, nfn, force=False):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		if nfn in self.fileMap[cat]:
			if not force:
				raise CfgDuplicateFile(nfn)
			self.fileMap[cat][nfn].setAttributes(self.fileMap[cat][fn].getAttributes().copy())
		else:
			attrdict = self.fileMap[cat][fn].getAttributes().copy()
			self.fileMap[cat][nfn] = CfgFile(attrdict)
			self.fileExt[cat][nfn] = ".ini"

		self.writeProperties(cat, nfn)
		self.fileMap[cat][nfn].setModified(False)
		
	def deleteFile(self, cat, fn):
		fqn = os.path.join(self.root, cat, fn + self.fileExt[cat][fn])
		os.unlink(fqn)
		
		del(self.fileMap[cat][fn])
		del(self.fileExt[cat][fn])
		
	def getExtruderCount(self, fn):
		if fn not in self.fileMap[self.extruderCategory]:
			return None
				
		return self.fileMap[self.extruderCategory][fn].getExtruderCount()

	def getAttribute(self, cat, fn, name):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		return self.fileMap[cat][fn].getAttribute(name)
	
	def getAttributes(self, cat, fn):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		return self.fileMap[cat][fn].getAttributes()
	
	def setAttribute(self, cat, fn, name, value, mustExist=False):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
		
		self.fileMap[cat][fn].setAttribute(name, value, mustExist)
		
	def getFileList(self, cat):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		return sorted(list(self.fileMap[cat].keys()))
		

		

