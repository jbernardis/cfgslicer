import os
import datetime
from configparser import RawConfigParser

from cfgexceptions import *

class CfgFile:
	def __init__(self, attrdict):
		self.modified = False
		self.attributes = attrdict
		
	def setModified(self, flag=True):
		self.modified = flag
		
	def isModified(self):
		return self.modified
		
	def getAttributes(self):
		return self.attributes
	
	def setAttributes(self, adict):
		self.attributes = adict.copy()
		self.setModified()
	
	def getAttribute(self, name):
		try:
			return self.attributes[name]
		except KeyError:
			raise CfgUnknownAttribute(name)
	
	def setAttribute(self, name, value, mustExist=False):
		if mustExist:
			if name not in self.attributes:
				raise CfgUnknownAttribute(name)
			
		self.attributes[name] = value
		self.setModified()
	
	
class CfgSlicer:	
	def __init__(self, root, dirs):
		self.root = root
		self.dirs = dirs
		self.loadAttributes()
		
	def loadAttributes(self):
		self.fileMap = {}
		self.fileExt = {}
		for d in self.dirs:
			path = os.path.join(self.root, d)
			fl = [os.path.join(path, f) for f in os.listdir(path) if os.path.isfile(os.path.join(path, f)) and f.lower().endswith(".ini")]

			fm = {}
			fx = {}
			for fp in fl:
				parser = RawConfigParser()
				with open(fp) as stream:
					parser.read_string("[top]\n" + stream.read())

				fa = {}					
				for k, v in parser.items("top"):
					fa[k] = v
				fm[os.path.splitext(os.path.basename(fp))[0]] = CfgFile(fa)
				fx[os.path.splitext(os.path.basename(fp))[0]] = os.path.splitext(os.path.basename(fp))[1]
				
			self.fileMap[d] = fm
			self.fileExt[d] = fx	
			
	def isAnyModified(self):
		for cat in self.fileMap:
			for f in self.fileMap[cat]:
				if self.fileMap[cat][f].isModified():
					return True
				
		return False
	
	def writeProperties(self, cat, fn):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		fqn = os.path.join(self.root, cat, fn+self.fileExt[cat][fn])
		attrdict = self.fileMap[cat][fn].getAttributes()
		
		with open(fqn, "w") as ofp:
			dt = datetime.datetime.now()
			tstamp = dt.strftime("%Y-%m-%d %H:%M:%S")
	
			ofp.write("# generated by CfgSlicer on %s\n" % tstamp)
	
			for k in sorted(attrdict.keys()):
				ofp.write("%s = %s\n" % (k, attrdict[k]))
				
		self.fileMap[cat][fn].setModified(False)
		
	def getRoorDir(self):
		return self.root
	
	def getCatRoot(self, cat):
		return os.path.join(self.root, cat)
		
	def writeModified(self):
		for cat in self.fileMap:
			for f in self.fileMap[cat]:
				if self.fileMap[cat][f].isModified():
					self.writeProperties(cat, f)
					
	def copyFile(self, cat, fn, nfn, force=False):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		if nfn in self.fileMap[cat]:
			if not force:
				raise CfgDuplicateFile(nfn)
			self.fileMap[cat][nfn].setAttributes(self.fileMap[cat][fn].getAttributes().copy())
		else:
			attrdict = self.fileMap[cat][fn].getAttributes().copy()
			self.fileMap[cat][nfn] = CfgFile(attrdict)
			self.fileExt[cat][nfn] = ".ini"

		self.writeProperties(cat, nfn)
		self.fileMap[cat][nfn].setModified(False)
		
	def deleteFile(self, cat, fn):
		fqn = os.path.join(self.root, cat, fn + self.fileExt[cat][fn])
		os.unlink(fqn)
		
		del(self.fileMap[cat][fn])
		del(self.fileExt[cat][fn])
	
	def getAttribute(self, cat, fn, name):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		return self.fileMap[cat][fn].getAttribute(name)
	
	def getAttributes(self, cat, fn):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
				
		return self.fileMap[cat][fn].getAttributes()
	
	def setAttribute(self, cat, fn, name, value, mustExist=False):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		if fn not in self.fileMap[cat]:
			raise CfgUnknownFile(fn)
		
		self.fileMap[cat][fn].setAttribute(name, value, mustExist)
		
	def getFileList(self, cat):
		if cat not in self.fileMap:
			raise CfgUnknownCategory(cat)
		
		return sorted(list(self.fileMap[cat].keys()))
		
		
